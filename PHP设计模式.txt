1.选择合适的编辑器  http://www.jetbrains.com/phpstrom  phpstrom集成开发环境IDE
2.选择编程字体
	a.必须选择等宽字体
	b.常见的等宽编程字体包括Courier New ，Consolas
	c.个人推荐大家使用Source Code Pro，是由Adobe公司专门为程序员设计，免费开源
3.项目环境准备
	PHP运行环境搭建,推荐使用EasyPHP
	a.绿色软件，重装系统之后仍然可用
	b.集成了Apache,MySQL,PHPMyadmin

PHP面向对象的高级特性
	1.命名空间  namespase定义  Test1::test()，使用
	2.自动加载  最早用__autoload() 现在用spl_autoload_register()
	PSR-0规范
		a.命名空间必须与绝对路径一致
		b.类名的首字母必须大写
		c.除入口文件外,其他“.php”必须只有一个类
	开发符合PSR-0规范的基础框架
		a.全部使用命名空间
		b.所有PHP文件必须自动载入,不能有include/require
		c.单一入口
	SPL库的使用(PHP标准库)
		1.SplStack(栈),SplQueue(队列),SplHeap(堆),SplFixedArray等数据结构类
		2.ArrayIterator,AppendIterator,Countable
		3.SPL提供的函数
	PHP链式操作的实现
	$db->where()->limit()->order(); 本质就是每个方法返回this对象
	PHP魔术方法的使用
	1.__get()/__set()
	2.__call()/__callStatic()
	3.__toString()
	4.__invoke()

	3种基本设计模式
		a.工厂模式
		    使用工厂方法生成对象,而不是new
		b.单例模式
		c.注册模式
			--可以将不同的类注册到一个数组中。取得时候就可以Object['db']->query   OR Object['page']->show
	适配器模式
		1.适配器模式,可以将截然不同的函数接口封装成统一的API
		2.实际应用举例,PHP的数据库操作有mysql,mysqli,pdo三种，可以用适配器模式统一成一致.类似的场景还有cache适配器,将memcache,redis,file,apc等不同的缓存函数,统一成一致
		    可以使用接口定义，然后封装成统一的API
	策略模式
		1.策略模式,将一组特定的行为和算法封装成类,以适应某些特定的上下文环境,这种模式就是策略模式
		2.实际应用举例,加入一个电商网站系统,针对男性女性用户要各自跳转到不同的商品类目,并且要所有广告位展示不用的广告
		    --可以定义一个接口。然后男士和女士的实现这个接口。调用的时候通过判断性别调用不用的接口类就可以了
		3使用策略模式可以实现Ioc，依赖倒置.控制反转

	数据对象映射模式
		1.数据对象映射模式,是将对象和数据存储映射起来,对一个对象的操作会映射为对数据存储的操作
		     --利用类的构造函数和析构函数来构造。相当于把数据库的一套记录当作一个对象。字段的值相当于类属性的值
		2.在代码中实现数据对象映射模式,我们将实现一个ORM类，将复杂的SQL语句映射成对象属性的操作
		3.综合使用数据对象映射模式,工厂模式,注册器模式

	观察者模式
		1.观察者模式(Observer),当一个对象状态发生改变时,依赖它的对象全部会受到通知,并自动更新
		2.场景：一个事件发生后,要执行一连串更新操作。传统的编程方式,就是在时间的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码
		3.观察者模式实现了低耦合，非侵入式的通知与更新机制
		      --可以实现一个事件发生很多逻辑改变的状态。定义一个逻辑改变的接口。所有改变的接口都实现它。观察者可以选择性的加入逻辑和删除逻辑。实现低耦合

	原型模式
		1.与工厂模式作用类似,都是用来创建对象
		2.与工厂模式的实现不同,原型模式是先创建好一个原型对象,然后通过clone原型对象来创建新的对象。这样就免去了类创建时重复的初始化操作
		3.原型模式适用于大对象的创建。创建一个大对象需要很大的开销，如果每次new就会消耗很大,原型模式仅需内存拷贝即可
			--主要就是一个对象的克隆，减少new的次数。只需要构建一个原型的对象
	装饰器模式
		1.装饰器模式(Decorator),可以动态的添加修改类的功能
		2.一个类提供了一项功能，如果要在修改并添加额外的功能，传统的的编程模式,需要写一个子类继承它,并重新实现类的方法
		3.使用装饰器模式,仅需在运行时添加一个装饰器对象即可实现,可以实现最大的灵活性
		     --比如实现一个图画的各种动态添加功能

	迭代器模式
		1.迭代器模式,在不需要了解内部实现的前提下,遍历一个聚合对象的内部元素
		2.相比与传统的编程模式,迭代器模式可以隐藏遍历元素的所需的操作
			实现需要实现php的Iterator接口

	代理模式
		1.在客户端与实体之间建立一个代理对象(proxy),客户端对实体进行操作全部委派给代理对象,隐藏实体的具体实现细节。
		2.Proxy还可以与业务代码分离,部署到另外的服务器。业务代码中通过PRC来委派任务
			--典型的就是mysql的主从或者读写分离
