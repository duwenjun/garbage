2014/10/19
AngularJS
	四大核心特性
	MVC
		-起源：1979年，Trygve Reenskaug第一次正式提出了MVC模式
	模块化和依赖注入
	双向数据绑定
	指令系统
思考：我们需要什么样的前端开发环境？
	代码编辑工具  sublime
	断点调试工具  goole chrome  Batarang
	版本管理工具  git git小乌龟
	代码合并和混淆工具  基于NodeJS  grunt   js文件合并  js代码自动压缩
每次Ctrl+s的时候自动执行以上动作   还可以每次ctrl+s自动运行单元测试，集成测试
www.gruntjs.org
	依赖管理工具  bower 来自推特   1.自动安装依赖的组件
2.组件之间的依赖检测 3.版本兼容性自动检测  http://bower.io/
前端组件自动化管理神器
		轻量级Server --http-server
			-款简单的http-server
			-基于ModeJS的HTTP接口
			-https://github.com/nodeapps/http-server
	单元测试工具runner    ---karma 
		 配合   jasmine
		 http://jasmine.github.is/
		 jasmine四个核心概念：分组.用例.期望.匹配,分表对应jasmine的四种函数
		 describe(string,function)这个函数表示分组，也就是一组测试用例。
		 it(string,function)这个函数表示测试用例
		 expect(expression)标识期望expression这个表达式具有某个值或者具有某种行为。
		 to***(arg)这个函数表示实例	
	集成测试工具
	    -专门为AngularJS定制的测试工具 -- Protractor
	    -protractor是一款集成测试工具，专门为AngularJS应用而设计；
	    -Protractor基于WebDriverJS
	    原理：利用WebDriverJS，可以借助于ModeJS直接调用浏览器(IE FF
Chrome)的接口；
	    -https://github.com/angular/protractor
	    -https://code.google.com/p/selenium/wiki/WebDriverJs
		--注意，Protractor是为AngularJS专门定制的工具，但是WebDriverJS是通用的
		--前端自动化和工业化

	双向数据绑定
	内容简介
	1.最简单的例子
	2.取值表达式与ng-bind指令
	3.双向绑定的典型场景--表单
	4.动态切换标签样式
	5.ng-show和ng-hide
	6.ng-class
	7.ngAnimate
	
路由介绍  
	第一部分：快速上手
	第二部分：基本概念和用法
		1.MVC  2.模块化与依赖注入   3.双向数据绑定   4.指令
		5.Serivice   6.Provider    7.表单    8.综合实例BookStore
		为什么需要MVC？
			代码规模越来越大，切分职责是大势所趋
			为了复用：很多逻辑是一模一样的
			为了后期维护方便:修改一块功能不影响其他功能
			MVC只是手段，终极目标是模块化和复用
		前端MVC的困难
			--浏览器加载脚本 -> 加载完成之后JIT编译执行
			操作DOM的代码必须等待整个页面全部加载完成
			多个JS文件之间如果出现互相依赖，程序员必须自己解决
			JS的原型继承也给前端编程带来了很多困难
		Controller使用过程中的注意点
			1.不要试图去复用Controller，一个控制器一般只负责一小块视图
			2.不要再Controller中操作DOM，这不是控制器的职责
			3.不要再Controller里面做数据格式化，ng有很好用的表单控件
			4.不要再Controller里面做数据过滤操作，ng有$filter服务
			5.一般来说，Controller是不会互相调用的，控制器之间的交互会通过事件进行
		Angular JS 的MVC是借助于$scope实现的!!!
		神器的$scope
		$scope是一个POJO(Plain Old JavaScript Object)
		$scope提供了一些工具方法$watch(),$apply()
		$scope是表达式的执行环境(或者叫作用域)
		$scope是一个树型结构，与DOM标签平行
		每一个Angular应用只有一个根$scope对象(一般位于ng-app上)
		$scope可以传播事件，类似DOM事件，可以向上也可以向下
		$scope不仅是MVC的基础，也是后面实现双向数据绑定的基础
		可以用angular.element($0).scope()进行调试
	    $scope的生命周期
		Creation
		Watcher registration
		Model mutation
		Mutation observartion
		Scope destruction
	
	第三部分：核心原理解析
	第四部分：ng控件开发
	第五部分：TDD和前端自动化测试
1.Ajax请求不会留下History记录
2.用户无法直接通过URL进入应用中的制定页面(保存书签.链接分享给朋友?)
3.Ajax对SEO是灾难！

ng官方推荐的模块切分方式
				app
controllers	directives 	services	routes		filters
	-任何一个ng应用都是由控制器，指令，服务，路由，过滤器等有限的模块类型构成的
	-控制器，指令，服务，路由，过滤器分别放在一个模块里面(可借助于grunt合并)
	-用一个总的app模块作为入口点，它依赖其他所有模块

一切都是从模块开始的
			<html ng-app="moduleName">
				Module
	config		Filter		Directive 	Factory		Controller
	Routes						Service
							Provider
							Value


AngularJS的双向数据绑定
		最简单的例子
		取值表达式与ng-bind指令
		双向绑定的典型场景--表单
		动态切换标签样式
		ng-show和ng-hide
		ng-class

前端路由的基本原理
哈希#
HTML5中新的history API
路由的核心是给应用定义"状态"
使用路由机制会影响到应用的整体编码方式(需要预先定义好状态)
考虑兼容性的问题与“优雅降级”

指令：AngularJS最核心的部分之一
解析最简单的指令hello：匹配模式restrict
	restrict--匹配模式
	E 		元素	<my-menu title="Products"></my-menu>
	A(默认) 属性	<div my-menu=Products></div>
	C 		样式类	<div class="my-menu:Products"></div>
	M 		注释	<!-- directive:my-menu Products -->
	推荐使用原始和属性的方式使用指令
	当需要创建带有自己的模板的指令时，使用元素名称的方式创建指令
	当需要为已有的HTML标签增加功能时，使用属性的方式创建指令
解析最简单的指令hello：template/templateUrl/$templateCache
1.template:'<div>everyone!</div>'
2.templateUrl:"hello.html"
3.$templateCache
	注射器加载完所有模块时，此方法执行一次
	myModule.run(function($templateCache){
		$templateCache.put("hello.html","<div>Hello everyOne!</div>");
	});
	myModule.directive("hello",function($templateCache){
		return {
			restrict:'AECM',
			template:$templateCache.get("hello.html"),
			replace:true
		}
	});//可以把模板缓冲起来多个指令使用
解析最简单的指令：hello：replace与transclude
replace会把指令中的内容替换，如果想要指令中的内容保存下来则用
myModule.directive("hello",function(){
	return{
		restrict:'AE',
		reansclude:true,
		template:"<div>Hello everyOne!<div ng-transclude></div></div>"
	}
});
	这样会把指令中的内容放到ng-transclude绑定的地方
comile与link（操作元素，添加CSS样式，绑定事件）
	加载阶段	加载angular.js，找到ng-app指令，确定应用的边界
	编译阶段	遍历DOM，找到所有指令； 把指令缓存起来
				根据指令代码中的template,replace,transclude转换DOM结构
				如果存在compile函数则调用；
	链接阶段	对每一条指令运行link函数
				link函数一般用来操作DOM，绑定事件监听器
	a.compile函数用来对模板自身进行转换，而link函数负责在模型和视图之间进行动态关联；
	b.作用域在链接阶段才会被绑定到编译之后的link函数上
	c.compile函数仅仅在编译阶段运行一次，而对于指令的每个实例，link函数都会执行一次；
	d.compile可以返回preLink和postLink函数而link函数只会返回postLink函数
	e.大多数时候我们只要编写link函数即可
指令与控制器之间的交互
指令间的交互
scope的类型与独立scope
	独立scope用scope:{}
	scope的绑定策略
	@	--把当前属性作为字符串传递，你还可以绑定来自外层的scope的指，在属性值中插入{{}}即可
	=	--与父scope的属性进行双向绑定
	&   --传递一个来自父scope的函数，稍后调用
scope的绑定策略
AngularJS内置的指令
实例解析Expander
实例解析Accordion
指令的运行原理：compile和link
总结：ERP类型的系统必备的UI组件
总结：互联网/电商型系统必备的UI组件
第三方指令库angular-ui
Directive思想de起源和原理概述

Service与Provider
使用$http服务
var myModule=angular.module("MyModule",[]);
myModule.controller('LoadDataCtrl', ['$scope','$http', function($scope,$http){
	$http({
        method: 'GET',
        url: 'data.json'
    }).success(function(data, status, headers, config) {
        console.log("success...");
        console.log(data);
        $scope.users=data;
    }).error(function(data, status, headers, config) {
        console.log("error...");
    });
}]);
创建自己的Service
	Service的特性
	Service都是单例的
	Service都是$injector负责实例化
	Service在整个应用的生命周期中存在，可以用来共享数据
	在需要使用的地方利用依赖注入机制注入Service
	自定义的Service需要写在内置的Service后面
	内置的Service的命名以$符号开头，自动用的Service应该避免

Service,Factory.Provider本质上都是Provider
	Provider模式是"策略模式"+"抽象工厂模式"的混合体
使用$filter服务
其他内置的Service介绍




	
