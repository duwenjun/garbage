以下是我对开发的部分建议
1.代码缩进，严格以4个空格缩进。就算是html文件也需要按照合理的缩进。
2.变量的命名
    1.命名要有实际含义，需要能一眼看懂是什么意思    如$time,$money,$.*Data,$startTime,
    2.命名风格标尺一致
        (1).变量的风格建议为首字母小写，相应变量的英文名(驼峰命名)，后面的单词首字母大写如$dataBase,$imgData,如果变量为数组，建议变量后缀加s比如files,imgs。变量为静态的，所以不应该在变量名中包含任何动词，比如$setTime,getTime等，也不能使用box这样无法正常识别的变量。如果变量为bool型应该加前缀is变量不能为拼音，汉字，如果不知道变量如何命名需要与团队沟通，采取合理的变量命名。如果是类中的私有变量需要加前缀_；
        (2).常量命名首先遵守1条规则，然后常量必须大写，如果有多个单词需要以_分割，比如COOKIE_EXPIRE，DB_TYPE！
        (3).函数命名建议为驼峰命名，同时函数是动态的，所以函数应该为动词。如getTime();setTime();getUserInfo();getFileExt();buildTemplateFile();等，如果是类中的私有或者受保护的，应该加前缀_;如果函数的返回值为bool型，则应该的命名为is_water(),is_file(),is_dir(),done,error,found,success。在类中的函数如果不是供外部调用，一律定义private私有。共有的方法一定要在最类的方法的前面显示，受保护和私有的在后，在类中的函数如果存在相互调用的则应该放在相邻的地方如 is_dir();is_file();函数的参数正常不应该超过三个，如果超过则应该用数组参数。
        (4)类命名应该为首字符大写如Upload;Cache;Log;Storage;等
        (5)不能使用语言关键字，比如if，else，class等
        (6)变量名中的常见对仗词：
        	如：begin/end
        		first/last
        		locked/unlocked
        		min/max
        		next/previous
        		old/new
        		opened/closed
        		visible/invisible
        		source/target
        		source/target
        		source/destination
        		up/down
        		show/hide
        		....等等。
3.变量的使用
	(1).使用一个变量需要初始化， 比如$userData = array();$tmpStr = '';并且变量的声明位置靠近第一次使用的位置。
	(2).变量的比较中需要把常量放在前面如if(EXT == 'html'){}，如果明确知道类型相同则应该使用===而不是==;
	(3).防御式编程思想  比如常见的id；  $id = intval($_POST['id']);如果是内容需要更具情况做处理如strip_tags();htmlspecialchars();addslashes();quotemeta();htmlentities()等等
	(4).变量的定义中如果是字符串，则只应该使用'',而不应该用"";如果是数字应该用0,而不是'0',"0"；取数组中的值应该使用''如$payStatus['order'],而不是$payStatus[order],也不能是""如$payStatus["order"]；如果有多个字符串的拼接建议使用""如"hello {$world}";
	(5).在函数或者类中，变量应该在最前面所定义。
	(6).避免同一变量用于两个用途。
		如  $data = array();
			$data = 'this is string';
	(7).声明的变量都应该使用。如果没有使用就不要声明。
4.函数的行数建议在50行以内，一个函数只做一件事情。如果一个函数内有多个操作，应该把多个操作分解为多个函数
5.PHP文件最后的?>不要有。
6.if的使用技巧，给定初始值，能不用else就不用eles
	function is_water($file){
		if($ImgStore->init($file)->getImgInfo['is_water']){
			return true;
		}else{
			return false;
		}
	}
	改：

	function is_water($file){
		$is_return = false;
		if($ImgStore->init($file)->getImgInfo['is_water']){
			$is_return = true;
		}
		return $is_return;
	}
7.if的使用技巧用&&替换多余的if
	if($is_roughVillage){
		if($is_water){
			.....;
		}
	}
	改：
	if($is_roughVillage && $is_water){
		........
	}
8.if的使用技巧用三元运算符替换 如 $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
9.使用短小精炼的代码如
     function is_copy($oidFile,$newFile){
     	  if(copy($oidFile,$newFile)){
     	  		reutrn true;
     	  }else{
     	  		return false;
     	  }
     }
     改：
     function is_copy(){
     	return copy($oidFile,$newFile);
     }
10.如果有相雷同的代码，不要采用复制，粘贴，应该抽离出一个单独的公用的方法
11.如果能用系统函数的千万不要自定义函数。
12.注释
	1.好的代码应该是自描述的Build类中的 buildTemplateFile()，buildModel()等
	2.去掉多余的注释比如add()；delete();如果能一眼看懂就不要乱加杂乱的注释。
	3.注释的目的是为了让后期维护，注释应该写的是最重要的信息。
	4.建议代码不要注释，如果有注释建议把注释的代码块删除，因为注释的代码会让后人难以理解。如果需要恢复到代码删除之前可以采用svn更新原来的版本！
	5.注释应该放在上方。如果注释超过一行则应该用多行注释，单行的用单行注释而不要用多行注释！
	6.注释应该表达为什么这么做，而不是做了什么！
	建议添加注释的地方： 
	    1.在每个文件首部添加注释说明；//说明当前文件的主要作用 
		2.每个函数或每个方法上方添加注释说明； //主要针对容易误解的函数
		3.对各变量的功能、范围、缺省条件等加上注释； //针对容易误解的函数
		4.对使用的逻辑算法加上注释   //对逻辑算法的介绍
13.空行的使用
	每段较大的程序体，上、下应当加入一个空白行，下列情况应该总是使用一个空行，禁止使用多行：
	1.两个函数声明之间。 
	2.函数内的局部变量和函数的第一条语句之间。 
	3.块注释或单行注释之前。 
	4.一个函数内的两个逻辑代码段之间，用以提高可读性。 
14.空格的使用时机 
	空格的应用规则是可以通过代码的缩进提高可读性。 
	1.空格一般应用于关键字与左括号“(”之间，不过需要注意的是，函数名称与左括 号之间不应该用空格分开。右括号“)”除后面是“)”或者“.”以外，其他一律用 空格隔开它们； 
	2.一般在函数的参数列表中的逗号后面插入空格。 
	3.数学算式的操作数与运算符之间应该添加空格（特例是二进制运算与一元运算除 外，字符连接运算符号两边不加空格）。 
	4.for 语句中的表达式应该用逗号分开，后面添加空格。 
	5.强制类型转换语句中的强制类型的右括号与表达式之间应该用逗号隔开，添加空 格。 
	6.除字符串中特意需要，一般情况下，在程序以及 HTML 中不出现两个连续的空格； 
	7.说明或显示部分中，内容如有中文、数字、英文单词混杂，应当在数字或者英文 单词的前后加入空格。
15.语言结构
	1.if 结构中，前花括号必须和条件语句在同一行，后花括号单独在最后一行，其中内 容使用缩进。else 和 else if 与前后两个大括号同行，左右各一个空格。另外，即便 if 后只有一行语句，仍然需要加入大括号，以保证结构清晰; 
	2.if 中条件语句的圆括号前后必须有一个空格; 
	3.括号内的条件语句中操作符必须用空格分开; 其中如果涉及多个运算符，则运算符优先级高的紧靠而不用空格，优先级低的应该使用空格。 
	4.不鼓励 elseif 写法，鼓励使用 else if 的写法; 
	5.在条件语句中存在多个运算符的时候，使用括号强制说明优先级，避免开发人员因 为运算符优先级概念混乱造成的逻辑错误。 
 	多余的话：
 		很多时候代码有很多编写方式
 			例：
 			(1) if(length >= 10)
 			(2) if(10 <= length)
 			但是对于大多数人来说，第一个更容易理解。

 			例：
 			(1) while(bytes_received < bytes_expected)
 			(2) while(bytes_expected > bytes_received)
 			但是对于大多数人来说，第一个更容易理解。
 			思考方式：比较的左侧->"被询问的"的表达式，他的值更倾向于不断变幻
 					  比较的右侧->用来做比较的表达式，它的值更倾向于常量

 			例：
 			(1) if (a == b) {
 					//case one ...
 				} else {
 					//case two ...
 				}
 			(2) if (a != b){
 					//case two...
 				} else {
 					//case one...
 				}
 			同样对于大多数人来说，第一个更容易理解。
 			思考方式：大多数人的思考方式都为首先想到正常的流程，在想不正常的。首先想到简单的，在想复杂的。

 			例：
 			(1) return exponent >= 0 ? mantissa * (1 << exponext) : mantissa / (1 << -exponent);
 			(2) if (exponent >= 0){
 					return mantissa * (1 << exponext);
 				} else {
 					return mantissa / (1 << -exponent);
 				}
 			同样对于大多数人来说，第二个更容易理解。
 			思考方式：大多数人的思考方式为一眼能看清结构和阐明逻辑。

 			衡量不用方式的代码哪个更好，最重要的应该是代码的可读性！也就是别人看到代码需要理解多长时间。


----------------------------------------使用ThinkPHP开发建议-------------------------------------------
1.首先认真查看ThinkPHP手册。
2.严格按照MVC模式。数据操作定义在Model层，视图定义在View层，连接视图和模型的称为控制器层。
3.模块的配置项操作应该定义在当前模块的Conf目录，关于错误或者成功的提示信息应该放在当前模块的Lang目录的zh-cn.php文件中，并且用大写加_的形式定义相应的提示。
4.如果有第三方的类库加载，需要把第三方的类放在ThinkPHP\Library\Vendor\目录，并且使用命名空间
5.如果涉及多表操作的模型，建议放在逻辑层Logic。单表操作应该放在Model层，多表操作应该放在逻辑层
6.thinkphp提供了方便的数据库查询机制，但是同样在查询数据的时候如果不是获取全部的字段都应该显示的说明需要获取的字段。如field('id,name,password');
7.永远记得数据库操作的用小结果集驱动大结果集。也就是虽然thinkphp提供了方便灵活的链式操作，但是在where条件中也应该首先是从数据表中的数据中分离出最少的一部分在分离。
8.数据在前后端都要处理，前端应该使用javascript过滤数据，后端也应该在过滤数据。
9.获取post或get数据的时候都不建议使用$_POST,而应该使用框架自带I方法I('post.id');
10.css和img和js文件应该存放在Public目录的对于模块的css，imgs，js目录。如果有共用的文件则应该放在Public目录的Common目录的css，imgs，js目录。
11.如果定义在全局的函数则应思考存放位置。如果为全网站公用则应该放在Application目录的Common目录的functions.php文件，如果是模块内公用则应该放在对于模块的Common目录的functions.php文件
12.核心目录的ThinkPHP目录内的文件建议不应该更改。



MYSQL建表建议
1.表的前缀为 hz;
2.表引擎统一使用Innodb;
3.表字符集统一使用utf-8;
4.排序规则统一使用utf8_general_ci;
5.每一个表都需要建立一个id字段，主键，自增；
6.每一个字段都需要写 注释；
7.选择合适的数据类型，比如主键一般用INT(10) ，status字段可以用TINYINT(2) ,用户密码加密用char(32) ，up，amend_time字段用TIMESTAMP  用户名VARCHAR(30) 等等。选择时考虑能满足需求，同时存储空间占用越小的越优先考虑！
8.用户能输入的表都需要加上client_ip字段，存储客户端ip；
9.相对应的表建议为如： hz_like <=> hz_beliked;

MYSQL操作建议
1.不能相信数据库的默认值，插入的时候关键字段都需要插入。
2.表中的数据没有绝对的删除。
3.所有表中的uid代表的都是当前用户的uid值，uid是主。
3.sex字段：用户姓名1男2女
4.status字段：当前数据状态：默认0，审核通过1，审核不通过2，删除9

