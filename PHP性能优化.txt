PHP语言级性能优化
优化点：产生额外开销的错误抑制符@
	情况描述：PHP提供的错误抑制符只是为了方便"懒人"
	@的实际逻辑
		在代码开始前.结束后.正价opcode，忽略报错
	好的建议:
		建议不要使用@错误抑制符
优化点：合理使用内存
	情况描述：
		PHP有内存回收机制保底，但也请小心使用内存
	好的建议：
		利用unset()及时释放不使用的内存(注：unset()出现注销不掉的情况)
优化点：尽量少的使用正则表达式
	情况描述：
		正则表达式的回溯开销较大，“没有金刚钻，别拦瓷器活”
	好的建议：
		尽量少的使用正则表达式
优化点：避免在循环内做运算
	情况描述：
		循环内的计算式将会被重复计算
优化点：减少计算密集型业务
	情况描述：
		PHP不适合密集型运算的场景
	为什么？ PHP语言特性决定了PHP不适合做大数据量运算
	PHP使用场景
		适合衔接Webserver与后端服务.UI呈现
优化点：务必使用带因号字符串做键值
	情况描述：
		PHP会将没有引号的键值当作常量，产生查找常量的开销
	好的建议：
		严格使用引号作为键值

		PHP周边为题的性能优化
PHP周边都有什么？
Linux环境   PHP   硬盘   数据库  内存    ：liunx运行环境，文件存储，数据库，缓存，网络
找出问题的核心，抓住大头的去做优化！

减少文件类操作
	常见PHP场景的开销次序
		读写网络数据》读写磁盘》读写数据库》读写内存
	让更多的操作读写内存，读写数据库
优化网络请求
	网络请求的坑：
	1：对方接口的不确定因素
	2：网络稳定性
	如何优化网络请求？
	1：设置超时时间
	a.链接超时   200ms
	b.读超时     800ms
	c.写超时     500ms
	2:将串行请求并行化
	a.使用curl_multi_*()
	b.使用swoole扩展
压缩PHP接口输出
	如何压缩？
		使用Gzip即可
	压缩输出的利与弊？
		利：利于我们的数据输出，Client端能更快获取数据
		弊：额外的CPU开销
缓存重复计算内容
	什么情况下做输出内容的缓存？
		多次请求，内存不变情况。
smarty模板的缓存。
重叠时间窗口思想：
ab  压力测试
vld -opcode代码分析
xhprof 工具来做优化：facebook的PHP性能分析工具
	